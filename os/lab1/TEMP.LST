            Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 1

021D:0600  02 2E 3E81				add	ch,byte ptr ds:[3E81h]	; (021D:3E81=0)
021D:0604  A8 02				test	al,2
021D:0606  FF 00				inc	word ptr [bx+si]
021D:0608  75 18				jnz	loc_2			; Jump if not zero
021D:060A  33 F6				xor	si,si			; Zero register
021D:060C  C4					db	0C4h
021D:060D  C4 17				les	dx,dword ptr [bx]	; Load 32 bit ptr
021D:060F  F6 C4 08				test	ah,8
021D:0612  74 07				jz	loc_1			; Jump if zero
021D:0614  2E: FF 0E 02A8			dec	word ptr cs:[2A8h]	; (021D:02A8=0)
021D:0619  EB 2F				jmp	short loc_4		; (064A)
021D:061B			loc_1:
021D:061B  2E: C7 06 02A8 0000			mov	word ptr cs:[2A8h],0	; (021D:02A8=0)
021D:0622			loc_2:
021D:0622  B4 90				mov	ah,90h
021D:0624  EB 24				jmp	short loc_4		; (064A)
							                        ;* No entry point to code
021D:0626  56					push	si
021D:0627  52					push	dx
021D:0628  BE FFFF				mov	si,0FFFFh
021D:062B  C4					db	0C4h
021D:062C  C4 17				les	dx,dword ptr [bx]	; Load 32 bit ptr
021D:062E  EB 1A				jmp	short loc_4		; (064A)
							                        ;* No entry point to code
021D:0630  90					nop
021D:0631  2E: F6 84 01A3 01			test	byte ptr cs:[1A3h][si],1	; (021D:01A3=0)
021D:0637  75 06				jnz	loc_3			; Jump if not zero
021D:0639  2E: 80 8C 019A 80			or	byte ptr cs:[19Ah][si],80h	; (021D:019A=0DFh)
021D:063F			loc_3:
021D:063F  2E: 8A A4 019A			mov	ah,byte ptr cs:[19Ah][si]	; (021D:019A=0DFh)
021D:0644  80 E4 F8				and	ah,0F8h
021D:0647  80 F4 48				xor	ah,48h			; 'H'
021D:064A			loc_4:
021D:064A  5A					pop	dx
021D:064B  5E					pop	si
021D:064C			loc_5:
021D:064C  1E					push	ds
021D:064D  50					push	ax
021D:064E  B8 0040				mov	ax,40h
021D:0651  8E D8				mov	ds,ax
021D:0653  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
021D:0659  75 4F				jnz	loc_13			; Jump if not zero
021D:065B  55					push	bp
021D:065C  8B EC				mov	bp,sp
021D:065E  8B 46 0A				mov	ax,[bp+0Ah]
021D:0661  5D					pop	bp
021D:0662  A9 0100				test	ax,100h
021D:0665  75 43				jnz	loc_13			; Jump if not zero
021D:0667  A9 0200				test	ax,200h
021D:066A  74 22				jz	loc_9			; Jump if zero
021D:066C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
021D:0673  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
021D:0679  75 2F				jnz	loc_13			; Jump if not zero
021D:067B			loc_6:
021D:067B  86 E0				xchg	ah,al
021D:067D  FC					cld				; Clear direction
021D:067E  A8 04				test	al,4
           Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 2

021D:0680  75 25				jnz	loc_12			; Jump if not zero
021D:0682			loc_7:
021D:0682  A8 08				test	al,8
021D:0684  75 11				jnz	loc_10			; Jump if not zero
021D:0686  70 19				jo	loc_11			; Jump if overflow=1
021D:0688			loc_8:
021D:0688  9E					sahf				; Store ah into flags
021D:0689  58					pop	ax
021D:068A  1F					pop	ds
021D:068B  CA 0002				retf	2			; Return far
021D:068E			loc_9:
021D:068E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (021D:0314=3231h)
021D:0695  EB E4				jmp	short loc_6		; (067B)
021D:0697			loc_10:
021D:0697  70 EF				jo	loc_8			; Jump if overflow=1
021D:0699  50					push	ax
021D:069A  B0 7F				mov	al,7Fh
021D:069C  04 02				add	al,2
021D:069E  58					pop	ax
021D:069F  EB E7				jmp	short loc_8		; (0688)
021D:06A1			loc_11:
021D:06A1  50					push	ax
021D:06A2  32 C0				xor	al,al			; Zero register
021D:06A4  58					pop	ax
021D:06A5  EB E1				jmp	short loc_8		; (0688)
021D:06A7			loc_12:
021D:06A7  FD					std				; Set direction flag
021D:06A8  EB D8				jmp	short loc_7		; (0682)
021D:06AA			loc_13:
021D:06AA  58					pop	ax
021D:06AB  1F					pop	ds
021D:06AC  CF					iret				; Interrupt return
							                        ;* No entry point to code
021D:06AD  EB 9D				jmp	short loc_5		; (064C)
021D:06AF  C4					db	0C4h
							                        ;* No entry point to code
021D:06B0  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
021D:06B3  98					cbw				; Convrt byte to word
021D:06B4  C4					db	0C4h
021D:06B5  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
021D:06B8  93					xchg	bx,ax
021D:06B9  E8 011D				call	sub_3			; (07D9)
021D:06BC  50					push	ax
021D:06BD  53					push	bx
021D:06BE  51					push	cx
021D:06BF  52					push	dx
021D:06C0  1E					push	ds
021D:06C1  B8 0040				mov	ax,40h
021D:06C4  8E D8				mov	ds,ax
021D:06C6  80 3E 0100 01			cmp	byte ptr ds:[100h],1	; (0040:0100=0)
021D:06CB  74 5A				je	loc_19			; Jump if equal
021D:06CD  C6 06 0100 01			mov	byte ptr ds:[100h],1	; (0040:0100=0)
021D:06D2  8A 2E 004A				mov	ch,byte ptr ds:[4Ah]	; (0040:004A=50h)
021D:06D6  8A 0E 0084				mov	cl,byte ptr ds:[84h]	; (0040:0084=18h)
021D:06DA  8A 3E 0062				mov	bh,byte ptr ds:[62h]	; (0040:0062=0)
021D:06DE  E8 004E				call	sub_1			; (072F)
021D:06E1  51					push	cx
           Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 3

021D:06E2  B4 03				mov	ah,3
021D:06E4  CD 10				int	10h			; Video display   ah=functn 03h
										;  get cursor loc in dx, mode cx
021D:06E6  59					pop	cx
021D:06E7  52					push	dx
021D:06E8  32 F6				xor	dh,dh			; Zero register
021D:06EA			loc_14:
021D:06EA  32 D2				xor	dl,dl			; Zero register
021D:06EC			loc_15:
021D:06EC  52					push	dx
021D:06ED  B4 02				mov	ah,2
021D:06EF  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
021D:06F1  B4 08				mov	ah,8
021D:06F3  CD 10				int	10h			; Video display   ah=functn 08h
										;  get char al & attrib ah @curs
021D:06F5  0A C0				or	al,al			; Zero ?
021D:06F7  75 02				jnz	loc_16			; Jump if not zero
021D:06F9  B0 20				mov	al,20h			; ' '
021D:06FB			loc_16:
021D:06FB  33 D2				xor	dx,dx			; Zero register
021D:06FD  32 E4				xor	ah,ah			; Zero register
021D:06FF  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
021D:0701  5A					pop	dx
021D:0702  80 E4 25				and	ah,25h			; '%'
021D:0705  74 07				jz	loc_17			; Jump if zero
021D:0707  C6 06 0100 FF			mov	byte ptr ds:[100h],0FFh	; (0040:0100=0)
021D:070C  EB 14				jmp	short loc_18		; (0722)
021D:070E			loc_17:
021D:070E  FE C2				inc	dl
021D:0710  3A D5				cmp	dl,ch
021D:0712  72 D8				jb	loc_15			; Jump if below
021D:0714  E8 0018				call	sub_1			; (072F)
021D:0717  FE C6				inc	dh
021D:0719  3A F1				cmp	dh,cl
021D:071B  76 CD				jbe	loc_14			; Jump if below or =
021D:071D  C6 06 0100 00			mov	byte ptr ds:[100h],0	; (0040:0100=0)
021D:0722			loc_18:
021D:0722  5A					pop	dx
021D:0723  B4 02				mov	ah,2
021D:0725  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
021D:0727			loc_19:
021D:0727  1F					pop	ds
021D:0728  5A					pop	dx
021D:0729  59					pop	cx
021D:072A  5B					pop	bx
021D:072B  58					pop	ax
021D:072C  E9 FF1D				jmp	loc_5			; (064C)

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

				sub_1		proc	near
021D:072F  52					push	dx
           Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 4

021D:0730  33 D2				xor	dx,dx			; Zero register
021D:0732  B8 000D				mov	ax,0Dh
021D:0735  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
021D:0737  33 D2				xor	dx,dx			; Zero register
021D:0739  B8 000A				mov	ax,0Ah
021D:073C  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
021D:073E  5A					pop	dx
021D:073F  C3					retn
				sub_1		endp

021D:0740  C4					db	0C4h
							                        ;* No entry point to code
021D:0741  C4 06 06E9				les	ax,dword ptr ds:[6E9h]	; (021D:06E9=32F6h) Load 32 bit ptr
021D:0745  FF					db	0FFh
021D:0746  E8 0070				call	sub_2			; (07B9)
021D:0749  06					push	es
021D:074A  1E					push	ds
021D:074B  50					push	ax
021D:074C  52					push	dx
021D:074D  B8 0040				mov	ax,40h
021D:0750  8E D8				mov	ds,ax
021D:0752  33 C0				xor	ax,ax			; Zero register
021D:0754  8E C0				mov	es,ax
021D:0756  FF 06 006C				inc	word ptr ds:[6Ch]	; (0040:006C=1794h)
021D:075A  75 04				jnz	loc_20			; Jump if not zero
021D:075C  FF 06 006E				inc	word ptr ds:[6Eh]	; (0040:006E=17h)
021D:0760			loc_20:
021D:0760  83 3E 006E 18			cmp	word ptr ds:[6Eh],18h	; (0040:006E=17h)
021D:0765  75 15				jne	loc_21			; Jump if not equal
021D:0767  81 3E 006C 00B0			cmp	word ptr ds:[6Ch],0B0h	; (0040:006C=1794h)
021D:076D  75 0D				jne	loc_21			; Jump if not equal
021D:076F  A3 006E				mov	word ptr ds:[6Eh],ax	; (0040:006E=17h)
021D:0772  A3 006C				mov	word ptr ds:[6Ch],ax	; (0040:006C=1794h)
021D:0775  C6 06 0070 01			mov	byte ptr ds:[70h],1	; (0040:0070=0)
021D:077A  0C 08				or	al,8
021D:077C			loc_21:
021D:077C  50					push	ax
021D:077D  FE 0E 0040				dec	byte ptr ds:[40h]	; (0040:0040=84h)
021D:0781  75 0B				jnz	loc_22			; Jump if not zero
021D:0783  80 26 003F F0			and	byte ptr ds:[3Fh],0F0h	; (0040:003F=0)
021D:0788  B0 0C				mov	al,0Ch
021D:078A  BA 03F2				mov	dx,3F2h
021D:078D  EE					out	dx,al			; port 3F2h, dsk0 contrl output
021D:078E			loc_22:
021D:078E  58					pop	ax
021D:078F  F7 06 0314 0004			test	word ptr ds:[314h],4	; (0040:0314=3200h)
021D:0795  75 0C				jnz	loc_23			; Jump if not zero
021D:0797  9F					lahf				; Load ah from flags
021D:0798  86 E0				xchg	ah,al
021D:079A  50					push	ax
021D:079B  26: FF 1E 0070			call	dword ptr es:[70h]	; (0000:0070=6ADh)
021D:07A0  EB 03				jmp	short loc_24		; (07A5)
021D:07A2  90					nop
021D:07A3			loc_23:
021D:07A3  CD 1C				int	1Ch			; Timer break (call each 18.2ms)
           Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 5

021D:07A5			loc_24:
021D:07A5  E8 0011				call	sub_2			; (07B9)
021D:07A8  B0 20				mov	al,20h			; ' '
021D:07AA  E6 20				out	20h,al			; port 20h, 8259-1 int command
										;  al = 20h, end of interrupt
021D:07AC  5A					pop	dx
021D:07AD  58					pop	ax
021D:07AE  1F					pop	ds
021D:07AF  07					pop	es
021D:07B0  E9 FE99				jmp	loc_5			; (064C)
021D:07B3  C4					db	0C4h
							                        ;* No entry point to code
021D:07B4  C4 0E 93E9				les	cx,dword ptr ds:[93E9h]	; (32F6:93E9=8D94h) Load 32 bit ptr
021D:07B8  FE					db	0FEh

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

				sub_2		proc	near
021D:07B9  1E					push	ds
021D:07BA  50					push	ax
021D:07BB  B8 0040				mov	ax,40h
021D:07BE  8E D8				mov	ds,ax
021D:07C0  9F					lahf				; Load ah from flags
021D:07C1  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
021D:07C7  75 0C				jnz	loc_26			; Jump if not zero
021D:07C9  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
021D:07D0			loc_25:
021D:07D0  9E					sahf				; Store ah into flags
021D:07D1  58					pop	ax
021D:07D2  1F					pop	ds
021D:07D3  EB 03				jmp	short loc_27		; (07D8)
021D:07D5			loc_26:
021D:07D5  FA					cli				; Disable interrupts
021D:07D6  EB F8				jmp	short loc_25		; (07D0)
021D:07D8			loc_27:
021D:07D8  C3					retn
				sub_2		endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

				sub_3		proc	near
021D:07D9  1E					push	ds
021D:07DA  50					push	ax
021D:07DB  B8 0040				mov	ax,40h
021D:07DE  8E D8				mov	ds,ax
021D:07E0  9F					lahf				; Load ah from flags
021D:07E1  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
021D:07E7  75 14				jnz	loc_29			; Jump if not zero
021D:07E9  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
021D:07EF  75 0C				jnz	loc_29			; Jump if not zero
021D:07F1  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
021D:07F8			loc_28:
           Temp.lst				Sourcer	v5.10   31-Dec- 4  11:05 pm   Page 6

021D:07F8  9E					sahf				; Store ah into flags
021D:07F9  58					pop	ax
021D:07FA  1F					pop	ds
021D:07FB  EB 03				jmp	short loc_30		; (0800)
021D:07FD			loc_29:
021D:07FD  FB					sti				; Enable interrupts
021D:07FE  EB F8				jmp	short loc_28		; (07F8)
021D:0800			loc_30:
021D:0800  C3					retn
				sub_3		endp


